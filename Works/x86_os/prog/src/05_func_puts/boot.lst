     1                                          BOOT_LOAD       equ     0x7c00  ;load position of boot program
     2                                          
     3                                          ORG     BOOT_LOAD       ;load address
     4                                  
     5                                  ;************************************************
     6                                  ;macro
     7                                  ;************************************************
     8                                  
     9                                  %include        "../include/macro.s"
     1                              <1> %macro cdecl 1-*.nolist 
     2                              <1>         
     3                              <1>         %rep %0 - 1 
     4                              <1>           push  %{-1:-1} 
     5                              <1>           %rotate -1 
     6                              <1>         %endrep 
     7                              <1>         
     8                              <1>         %rotate -1 
     9                              <1>           
    10                              <1>           call  %1 
    11                              <1>         
    12                              <1>         %if 1 < %0 
    13                              <1>           add   sp, (__BITS__ >> 3) * (%0 - 1) 
    14                              <1>         %endif 
    15                              <1> %endmacro
    16                              <1> 
    10                                  
    11                                  ;************************************************
    12                                  ;entry point
    13                                  ;************************************************
    14                                  
    15                                  entry:
    16                                          ;----------------------------------------
    17                                          ;BPB
    18                                          ;----------------------------------------
    19 00000000 EB58                            jmp     ipl
    20 00000002 90<rept>                        times   90-($-$$) db 0x90
    21                                  
    22                                          ;----------------------------------------
    23                                          ;IPL
    24                                          ;----------------------------------------
    25                                  
    26                                  
    27                                  ipl:
    28 0000005A FA                              cli     ;deny interrupt
    29                                  
    30                                  
    31 0000005B B80000                          mov     ax, 0x0000
    32 0000005E 8ED8                            mov     ds, ax
    33 00000060 8EC0                            mov     es, ax
    34 00000062 8ED0                            mov     ss, ax
    35 00000064 BC007C                          mov     sp, BOOT_LOAD
    36                                  
    37 00000067 FB                              sti                     ;allow interrupt
    38                                          
    39 00000068 8816[8600]                      mov     [BOOT.DRIVE], dl ;save boot drive
    40                                  
    41                                          ;------------------------------------
    42                                          ;print char
    43                                          ;------------------------------------
    44 0000006C 68[7700]E8160083C4-             cdecl   puts, .s0       ;puts(.s0)
    44 00000074 02                 
    45                                  
    46                                          
    47                                          ;------------------------------------
    48                                          ;finish code
    49                                          ;------------------------------------
    50                                  
    51 00000075 EBFE                            jmp     $
    52                                  
    53                                          ;------------------------------------
    54                                          ;data
    55                                          ;------------------------------------
    56 00000077 426F6F74696E672E2E-     .s0     db "Booting....", 0x0A, 0x0D, 0
    56 00000080 2E2E0A0D00         
    57                                  
    58                                  
    59 00000085 00                      ALIGN 2, db 0
    60                                  BOOT:                   ;information of boot drive
    61                                  
    62                                  .DRIVE: 
    63 00000086 0000                            dw 0            ;number of drive
    64                                  
    65                                  ;************************************************
    66                                  ;modules
    67                                  ;************************************************
    68                                  
    69                                  %include        "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1> 
     3                              <1>         ;--------------------------------
     4                              <1>         ;create stack frame
     5                              <1>         ;--------------------------------
     6                              <1> 
     7                              <1>         ;push strings address   BP +4|
     8                              <1>         ;push return address       +2| IP
     9 00000088 55                  <1>         push    bp                 ;+0| BP
    10 00000089 89E5                <1>         mov     bp, sp
    11                              <1> 
    12                              <1> 
    13                              <1>         ;--------------------------------
    14                              <1>         ;save register
    15                              <1>         ;--------------------------------
    16 0000008B 50                  <1>         push    ax
    17 0000008C 53                  <1>         push    bx
    18 0000008D 56                  <1>         push    si
    19                              <1> 
    20                              <1>         ;--------------------------------
    21                              <1>         ;get parameter
    22                              <1>         ;--------------------------------
    23 0000008E 8B7604              <1>         mov     si, [bp + 4]
    24                              <1> 
    25                              <1>         ;--------------------------------
    26                              <1>         ;start 
    27                              <1>         ;--------------------------------
    28 00000091 B40E                <1>         mov     ah, 0x0E        ;tele type output
    29 00000093 BB0000              <1>         mov     bx, 0x0000      ;set 0 to page number and color of char
    30 00000096 FC                  <1>         cld                     ;DF = 0;address++
    31                              <1> .10L:                           ;do
    32                              <1>                                 ;{
    33 00000097 AC                  <1>         lodsb                   ;  AL = *SI++;
    34                              <1> 
    35 00000098 3C00                <1>         cmp     al, 0           ;  if(0 == AL)
    36 0000009A 7404                <1>         je      .10E            ;  break;
    37                              <1> 
    38 0000009C CD10                <1>         int     0x10            ;int10(0x0E, AL); video BIOS call
    39 0000009E EBF7                <1>         jmp     .10L
    40                              <1> .10E:                            ;}while(1);
    41                              <1> 
    42                              <1>         ;--------------------------------
    43                              <1>         ;return register
    44                              <1>         ;--------------------------------
    45 000000A0 5E                  <1>         pop     si
    46 000000A1 5B                  <1>         pop     bx
    47 000000A2 58                  <1>         pop     ax
    48                              <1> 
    49                              <1>         ;--------------------------------
    50                              <1>         ;delete stack frame
    51                              <1>         ;--------------------------------
    52 000000A3 89EC                <1>         mov     sp, bp
    53 000000A5 5D                  <1>         pop     bp
    54                              <1>         
    55 000000A6 C3                  <1>         ret
    56                              <1> 
    70                                  
    71                                  
    72                                  ;************************************************
    73                                  ; boot flag
    74                                  ;************************************************
    75                                  
    76 000000A7 00<rept>                        times   510-($-$$) db 0x00
    77 000001FE 55AA                            db      0x55, 0xAA
