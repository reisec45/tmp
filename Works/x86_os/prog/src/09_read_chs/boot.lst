     1                                  ;************************************************
     2                                  ;macro
     3                                  ;************************************************
     4                                  %include        "../include/define.s"
     1                              <1>         BOOT_LOAD       equ     0x7c00  ;boot position of boot program
     2                              <1> 
     3                              <1>         BOOT_SIZE       equ     (1024 * 8)      ;boot size
     4                              <1>         SECT_SIZE       equ     (512)           ;sector size
     5                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE) ;number of sector of boot program
     5                                  %include        "../include/macro.s"
     1                              <1> %macro cdecl 1-*.nolist 
     2                              <1>         
     3                              <1>         %rep %0 - 1 
     4                              <1>           push  %{-1:-1} 
     5                              <1>           %rotate -1 
     6                              <1>         %endrep 
     7                              <1>         
     8                              <1>         %rotate -1 
     9                              <1>           
    10                              <1>           call  %1 
    11                              <1>         
    12                              <1>         %if 1 < %0 
    13                              <1>           add   sp, (__BITS__ >> 3) * (%0 - 1) 
    14                              <1>         %endif 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc drive
    18 00000000 <res 00000002>      <1>         .no     resw 1          ;number of drive
    19 00000002 <res 00000002>      <1>         .cyln   resw 1          ;silinda
    20 00000004 <res 00000002>      <1>         .head   resw 1          ;head
    21 00000006 <res 00000002>      <1>         .sect   resw 1          ;sector
    22                              <1> endstruc
     6                                  
     7                                          ORG     BOOT_LOAD       ;load address
     8                                  
     9                                  ;************************************************
    10                                  ;entry point
    11                                  ;************************************************
    12                                  
    13                                  entry:
    14                                          ;----------------------------------------
    15                                          ;BPB
    16                                          ;----------------------------------------
    17 00000000 EB58                            jmp     ipl
    18 00000002 90<rept>                        times   90-($-$$) db 0x90
    19                                  
    20                                          ;----------------------------------------
    21                                          ;IPL
    22                                          ;----------------------------------------
    23                                  
    24                                  
    25                                  ipl:
    26 0000005A FA                              cli     ;deny interrupt
    27                                  
    28                                  
    29 0000005B B80000                          mov     ax, 0x0000
    30 0000005E 8ED8                            mov     ds, ax
    31 00000060 8EC0                            mov     es, ax
    32 00000062 8ED0                            mov     ss, ax
    33 00000064 BC007C                          mov     sp, BOOT_LOAD
    34                                  
    35 00000067 FB                              sti                     ;allow interrupt
    36                                          
    37                                          ;------------------------------------
    38                                          ;save boot drive
    39                                          ;------------------------------------
    40 00000068 8816[BA00]                      mov     [BOOT + drive.no], dl ;save boot drive
    41                                  
    42                                          ;------------------------------------
    43                                          ;print char
    44                                          ;------------------------------------
    45 0000006C 68[9900]E8520083C4-             cdecl   puts, .s0       ;puts(.s0)
    45 00000074 02                 
    46                                  
    47                                          ;------------------------------------
    48                                          ;read all sector
    49                                          ;------------------------------------
    50 00000075 BB0F00                          mov     bx, BOOT_SECT - 1       ;BX = number of boot sector
    51 00000078 B9007E                          mov     cx, BOOT_LOAD + SECT_SIZE       ;CX = silinda/sector
    52                                          
    53                                  
    54 0000007B 515368[BA00]E89F00-             cdecl   read_chs, BOOT, bx, cx  ;AX = read_chs(BOOT, BX, CX);
    54 00000083 83C406             
    55                                  
    56 00000086 39D8                            cmp     ax, bx
    57 00000088 740C                    .10Q:   jz      .10E                    ;{
    58 0000008A 68[A700]E8340083C4-     .10T:   cdecl   puts, .e0               ;{puts(.e0);
    58 00000092 02                 
    59 00000093 E84D00                          call    reboot                  ;reboot()
    60                                  .10E:                                   ;}
    61                                  
    62                                          ;------------------------------------
    63                                          ;move stage2
    64                                          ;------------------------------------
    65                                  
    66 00000096 E96701                          jmp     stage_2                 ;boot stage2
    67                                  
    68                                          ;------------------------------------
    69                                          ;data
    70                                          ;------------------------------------
    71 00000099 426F6F74696E672E2E-     .s0     db "Booting....", 0x0A, 0x0D, 0
    71 000000A2 2E2E0A0D00         
    72 000000A7 4572726F723A736563-     .e0     db "Error:sector read", 0
    72 000000B0 746F72207265616400 
    73                                  
    74 000000B9 00                      ALIGN 2, db 0
    75                                  BOOT:                   ;information of boot drive
    76                                    istruc drive
    77 000000BA 0000                        at drive.no,        dw 0    ;number of drive
    78 000000BC 0000                        at drive.cyln,      dw 0    ;C:silinda
    79 000000BE 0000                        at drive.head,      dw 0    ;H:head
    80 000000C0 0200                        at drive.sect,      dw 2    ;sector
    81                                    iend
    82                                  
    83                                  .DRIVE: 
    84 000000C2 0000                            dw 0            ;number of drive
    85                                  
    86                                  ;************************************************
    87                                  ;modules
    88                                  ;************************************************
    89                                  
    90                                  %include        "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1> 
     3                              <1>         ;--------------------------------
     4                              <1>         ;create stack frame
     5                              <1>         ;--------------------------------
     6                              <1> 
     7                              <1>         ;push strings address   BP +4|
     8                              <1>         ;push return address       +2| IP
     9 000000C4 55                  <1>         push    bp                 ;+0| BP
    10 000000C5 89E5                <1>         mov     bp, sp
    11                              <1> 
    12                              <1> 
    13                              <1>         ;--------------------------------
    14                              <1>         ;save register
    15                              <1>         ;--------------------------------
    16 000000C7 50                  <1>         push    ax
    17 000000C8 53                  <1>         push    bx
    18 000000C9 56                  <1>         push    si
    19                              <1> 
    20                              <1>         ;--------------------------------
    21                              <1>         ;get parameter
    22                              <1>         ;--------------------------------
    23 000000CA 8B7604              <1>         mov     si, [bp + 4]
    24                              <1> 
    25                              <1>         ;--------------------------------
    26                              <1>         ;start 
    27                              <1>         ;--------------------------------
    28 000000CD B40E                <1>         mov     ah, 0x0E        ;tele type output
    29 000000CF BB0000              <1>         mov     bx, 0x0000      ;set 0 to page number and color of char
    30 000000D2 FC                  <1>         cld                     ;DF = 0;address++
    31                              <1> .10L:                           ;do
    32                              <1>                                 ;{
    33 000000D3 AC                  <1>         lodsb                   ;  AL = *SI++;
    34                              <1> 
    35 000000D4 3C00                <1>         cmp     al, 0           ;  if(0 == AL)
    36 000000D6 7404                <1>         je      .10E            ;  break;
    37                              <1> 
    38 000000D8 CD10                <1>         int     0x10            ;int10(0x0E, AL); video BIOS call
    39 000000DA EBF7                <1>         jmp     .10L
    40                              <1> .10E:                            ;}while(1);
    41                              <1> 
    42                              <1>         ;--------------------------------
    43                              <1>         ;return register
    44                              <1>         ;--------------------------------
    45 000000DC 5E                  <1>         pop     si
    46 000000DD 5B                  <1>         pop     bx
    47 000000DE 58                  <1>         pop     ax
    48                              <1> 
    49                              <1>         ;--------------------------------
    50                              <1>         ;delete stack frame
    51                              <1>         ;--------------------------------
    52 000000DF 89EC                <1>         mov     sp, bp
    53 000000E1 5D                  <1>         pop     bp
    54                              <1>         
    55 000000E2 C3                  <1>         ret
    56                              <1> 
    91                                  %include        "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1> 
     3                              <1>         ;---------------------------------
     4                              <1>         ;print message
     5                              <1>         ;---------------------------------
     6 000000E3 68[FF00]E8DBFF83C4- <1>         cdecl   puts, .s0               ;print message of reboot
     6 000000EB 02                  <1>
     7                              <1> 
     8                              <1> 
     9                              <1>         ;---------------------------------
    10                              <1>         ;waiting for key input
    11                              <1>         ;---------------------------------
    12                              <1> .10L:                                   ;do
    13                              <1>                                         ;{
    14 000000EC B410                <1>         mov     ah, 0x10                ;//waiting for key input
    15 000000EE CD16                <1>         int     0x16                    ;AL = BIOS(0x16,0x10);
    16                              <1> 
    17 000000F0 3C20                <1>         cmp     al,' '                  ;ZF = AL =='';
    18 000000F2 75F8                <1>         jne     .10L                    ;}while(!ZF);
    19                              <1> 
    20                              <1>         ;---------------------------------
    21                              <1>         ;output '\n'
    22                              <1>         ;---------------------------------
    23 000000F4 68[1D01]E8CAFF83C4- <1>         cdecl   puts, .s1               ;'\n'
    23 000000FC 02                  <1>
    24                              <1> 
    25                              <1>         ;---------------------------------
    26                              <1>         ;reboot
    27                              <1>         ;---------------------------------
    28 000000FD CD19                <1>         int     0x19                    ;BIOS(0x19);    //reboot();
    29                              <1> 
    30                              <1>         ;---------------------------------
    31                              <1>         ;data of strings
    32                              <1>         ;---------------------------------
    33 000000FF 0A0D50757368205350- <1> .s0     db      0x0A, 0x0D, "Push SPACE key to reboot...", 0
    33 00000108 414345206B65792074- <1>
    33 00000111 6F207265626F6F742E- <1>
    33 0000011A 2E2E00              <1>
    34 0000011D 0A0D0A0D00          <1> .s1     db      0x0A, 0x0D, 0x0A,0x0D,0
    92                                  %include        "../modules/real/read_chs.s"
     1                              <1> read_chs:
     2                              <1>         ;--------------------------------------- 
     3                              <1>         ; 【スタック フレーム の 構築】 
     4                              <1>         ;--------------------------------------- 
     5                              <1>                                         ; + 8 | コピー 先 
     6                              <1>                                         ; + 6 | セクタ 数 
     7                              <1>                                         ; + 4 | パラメータ バッファ 
     8                              <1>                                         ; ------+---------------- 
     9                              <1>                                         ; + 2 | IP（ 戻り 番地） 
    10 00000122 55                  <1>         push    bp                      ; BP + 0 | BP（ 元 の 値）
    11 00000123 89E5                <1>         mov     bp, sp                  ; ------+-------- 
    12 00000125 6A03                <1>         push    3                       ; - 2 | retry = 3; // リトライ 回数 
    13 00000127 6A00                <1>         push    0                       ; - 4 | sect = 0; // 読み込み セクタ 数 
    14                              <1> 
    15                              <1>         
    16                              <1>         ;--------------------------------------- 
    17                              <1>         ; 【レジスタ の 保存】 
    18                              <1>         ;--------------------------------------- 
    19 00000129 53                  <1>         push    bx 
    20 0000012A 51                  <1>         push    cx 
    21 0000012B 52                  <1>         push    dx 
    22 0000012C 06                  <1>         push    es 
    23 0000012D 56                  <1>         push    si 
    24                              <1> 
    25                              <1>         ;--------------------------------------- 
    26                              <1>         ; 【処理 の 開始】 
    27                              <1>         ;--------------------------------------- 
    28 0000012E 8B7604              <1>         mov     si, [bp + 4] ; SI = SRC バッファ; 
    29                              <1> 
    30                              <1>         ;--------------------------------------- 
    31                              <1>         ; CX レジスタ の 設定 
    32                              <1>         ;（BIOS コール の 呼び出し に 適し た 形 に 変換）
    33                              <1>         ;--------------------------------------- 
    34 00000131 8A6C02              <1>         mov     ch, [si + drive.cyln + 0] ; CH = シリンダ 番号（ 下位 バイト） 
    35 00000134 8A4C03              <1>         mov     cl, [si + drive.cyln + 1] ; CL = シリンダ 番号（ 上位 バイト） 
    36 00000137 C0E106              <1>         shl     cl, 6                     ; CL <<= 6; // 最上位 2 ビット に シフト 
    37 0000013A 0A4C06              <1>         or      cl, [si + drive.sect]     ; CL |= セクタ 番号; 
    38                              <1> 
    39                              <1>         ;--------------------------------------- 
    40                              <1>         ; セクタ 読み込み 
    41                              <1>         ;--------------------------------------- 
    42 0000013D 8A7404              <1>         mov     dh, [si + drive.head]       ; DH = ヘッド 番号; 
    43 00000140 8A14                <1>         mov     dl, [si + 0]                ; DL = ドライブ 番号; 
    44 00000142 B80000              <1>         mov     ax, 0x0000                  ; AX = 0 x 0000; 
    45 00000145 8EC0                <1>         mov     es, ax                      ; ES = セグメント 
    46 00000147 8B5E08              <1>         mov     bx, [bp + 8]                ; BX = コピー 先; 
    47                              <1> .10L:                                    ; do ; { 
    48 0000014A B402                <1>         mov     ah, 0x02                    ; AH = セクタ 読み込み 
    49 0000014C 8A4606              <1>         mov     al, [bp + 6]                ; AL = セクタ 数 
    50                              <1>                                         ; 
    51 0000014F CD13                <1>         int     0x13                        ; CF = BIOS( 0 x 13, 0 x 02); 
    52 00000151 7304                <1>         jnc     .11E                        ; if (CF)
    53                              <1>                                         ; { 
    54 00000153 B000                <1>         mov     al, 0                       ; AL = 0; 
    55 00000155 EB0C                <1>         jmp     .10E                        ; break; 
    56                              <1> .11E:                                   ; } 
    57                              <1>                                         ; 
    58 00000157 3C00                <1>         cmp     al, 0                       ; if (読み込ん だ セクタ が あれ ば) 
    59 00000159 7508                <1>         jne     .10E                        ; break; 
    60                              <1>                                         ; 
    61 0000015B B80000              <1>         mov     ax, 0                       ; ret = 0; // 戻り値 を 設定 
    62 0000015E FF4EFE              <1>         dec     word [bp - 2]           ; } 
    63 00000161 75E7                <1>         jnz     .10L                        ; while (--retry); 
    64 00000163 B400                <1> .10E:   mov     ah, 0                  ; AH = 0; // ステータス 情報 は 破棄 
    65                              <1>         ;--------------------------------------- 
    66                              <1>         ; 【レジスタ の 復帰】 
    67                              <1>         ;--------------------------------------- 
    68 00000165 5E                  <1>         pop     si 
    69 00000166 07                  <1>         pop     es 
    70 00000167 5A                  <1>         pop     dx 
    71 00000168 59                  <1>         pop     cx
    72 00000169 5B                  <1>         pop     bx                              
    73                              <1>         ;--------------------------------------- 
    74                              <1>         ; 【スタック フレーム の 破棄】 
    75                              <1>         ;--------------------------------------- 
    76 0000016A 89EC                <1>         mov     sp, bp 
    77 0000016C 5D                  <1>         pop     bp 
    78 0000016D C3                  <1>         ret
    79                              <1> 
    93                                  ;************************************************
    94                                  ; boot flag
    95                                  ;************************************************
    96                                  
    97 0000016E 00<rept>                        times   510-($-$$) db 0x00
    98 000001FE 55AA                            db      0x55, 0xAA
    99                                  
   100                                  ;************************************************
   101                                  ;boot stage2
   102                                  ;************************************************
   103                                  stage_2:
   104                                          ;-----------------------------------
   105                                          ;print strings
   106                                          ;-----------------------------------
   107 00000200 68[0B02]E8BEFE83C4-             cdecl   puts, .s0
   107 00000208 02                 
   108                                  
   109                                          ;-----------------------------------
   110                                          ;finish
   111                                          ;-----------------------------------
   112 00000209 EBFE                            jmp     $                       ;while(1)
   113                                  
   114                                          ;-----------------------------------
   115                                          ;data
   116                                          ;-----------------------------------
   117 0000020B 326E64207374616765-     .s0     db "2nd stage...", 0x0A, 0x0D, 0
   117 00000214 2E2E2E0A0D00       
   118                                  
   119                                  ;************************************************
   120                                  ;pating 8Kbite
   121                                  ;************************************************
   122 0000021A 00<rept>                        times   BOOT_SIZE - ($ - $$) db 0      ;8Kbyte
   123                                  
