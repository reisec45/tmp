     1                                          BOOT_LOAD       equ     0x7c00  ;load position of boot program
     2                                          
     3                                          ORG     BOOT_LOAD       ;load address
     4                                  
     5                                  ;************************************************
     6                                  ;macro
     7                                  ;************************************************
     8                                  
     9                                  %include        "../include/macro.s"
     1                              <1> %macro cdecl 1-*.nolist 
     2                              <1>         
     3                              <1>         %rep %0 - 1 
     4                              <1>           push  %{-1:-1} 
     5                              <1>           %rotate -1 
     6                              <1>         %endrep 
     7                              <1>         
     8                              <1>         %rotate -1 
     9                              <1>           
    10                              <1>           call  %1 
    11                              <1>         
    12                              <1>         %if 1 < %0 
    13                              <1>           add   sp, (__BITS__ >> 3) * (%0 - 1) 
    14                              <1>         %endif 
    15                              <1> %endmacro
    16                              <1> 
    10                                  
    11                                  ;************************************************
    12                                  ;entry point
    13                                  ;************************************************
    14                                  
    15                                  entry:
    16                                          ;----------------------------------------
    17                                          ;BPB
    18                                          ;----------------------------------------
    19 00000000 EB58                            jmp     ipl
    20 00000002 90<rept>                        times   90-($-$$) db 0x90
    21                                  
    22                                          ;----------------------------------------
    23                                          ;IPL
    24                                          ;----------------------------------------
    25                                  
    26                                  
    27                                  ipl:
    28 0000005A FA                              cli     ;deny interrupt
    29                                  
    30                                  
    31 0000005B B80000                          mov     ax, 0x0000
    32 0000005E 8ED8                            mov     ds, ax
    33 00000060 8EC0                            mov     es, ax
    34 00000062 8ED0                            mov     ss, ax
    35 00000064 BC007C                          mov     sp, BOOT_LOAD
    36                                  
    37 00000067 FB                              sti                     ;allow interrupt
    38                                          
    39 00000068 8816[4A01]                      mov     [BOOT.DRIVE], dl ;save boot drive
    40                                  
    41                                          ;------------------------------------
    42                                          ;print char
    43                                          ;------------------------------------
    44 0000006C 68[3001]E8DA0083C4-             cdecl   puts, .s0       ;puts(.s0)
    44 00000074 02                 
    45                                  
    46                                          ;------------------------------------
    47                                          ;print number
    48                                          ;------------------------------------
    49 00000075 6A016A0A6A0868-                 cdecl itoa, 8086, .s1, 8, 10, 0b0001 ; " 8086" 
    49 0000007C [3E01]68961FE8E700-
    49 00000084 83C40A             
    50 00000087 68[3E01]E8BF0083C4-             cdecl puts, .s1
    50 0000008F 02                 
    51 00000090 6A036A0A6A0868-                 cdecl itoa, 8086, .s1, 8, 10, 0b0011 ; "+ 8086" 
    51 00000097 [3E01]68961FE8CC00-
    51 0000009F 83C40A             
    52 000000A2 68[3E01]E8A40083C4-             cdecl puts, .s1 
    52 000000AA 02                 
    53 000000AB 6A016A0A6A0868-                 cdecl itoa, -8086, .s1, 8, 10, 0b0001 ; "- 8086" 
    53 000000B2 [3E01]686AE0E8B100-
    53 000000BA 83C40A             
    54 000000BD 68[3E01]E8890083C4-             cdecl puts, .s1 
    54 000000C5 02                 
    55 000000C6 6A016A0A6A0868-                 cdecl itoa, -1, .s1, 8, 10, 0b0001 ; "- 1" 
    55 000000CD [3E01]6AFFE8970083-
    55 000000D5 C40A               
    56 000000D7 68[3E01]E86F0083C4-             cdecl puts, .s1 
    56 000000DF 02                 
    57 000000E0 6A006A0A6A0868-                 cdecl itoa, -1, .s1, 8, 10, 0b0000 ; " 65535" 
    57 000000E7 [3E01]6AFFE87D0083-
    57 000000EF C40A               
    58 000000F1 68[3E01]E8550083C4-             cdecl puts, .s1 
    58 000000F9 02                 
    59 000000FA 6A006A106A0868-                 cdecl itoa, -1, .s1, 8, 16, 0b0000 ; " FFFF" 
    59 00000101 [3E01]6AFFE8630083-
    59 00000109 C40A               
    60 0000010B 68[3E01]E83B0083C4-             cdecl puts, .s1
    60 00000113 02                 
    61 00000114 6A046A026A0868-                 cdecl itoa, 12, .s1, 8, 2, 0b0100 ; "00001100" 
    61 0000011B [3E01]6A0CE8490083-
    61 00000123 C40A               
    62 00000125 68[3E01]E8210083C4-             cdecl puts, .s1 
    62 0000012D 02                 
    63                                  
    64                                          ;------------------------------------
    65                                          ;finish code
    66                                          ;------------------------------------
    67                                  
    68 0000012E EBFE                            jmp     $
    69                                  
    70                                          ;------------------------------------
    71                                          ;data
    72                                          ;------------------------------------
    73 00000130 426F6F74696E672E2E-     .s0     db "Booting....", 0x0A, 0x0D, 0
    73 00000139 2E2E0A0D00         
    74 0000013E 2D2D2D2D2D2D2D2D0A-     .s1     db "--------", 0x0A, 0x0D, 0
    74 00000147 0D00               
    75                                  
    76 00000149 00                      ALIGN 2, db 0
    77                                  BOOT:                   ;information of boot drive
    78                                  
    79                                  .DRIVE: 
    80 0000014A 0000                            dw 0            ;number of drive
    81                                  
    82                                  ;************************************************
    83                                  ;modules
    84                                  ;************************************************
    85                                  
    86                                  %include        "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1> 
     3                              <1>         ;--------------------------------
     4                              <1>         ;create stack frame
     5                              <1>         ;--------------------------------
     6                              <1> 
     7                              <1>         ;push strings address   BP +4|
     8                              <1>         ;push return address       +2| IP
     9 0000014C 55                  <1>         push    bp                 ;+0| BP
    10 0000014D 89E5                <1>         mov     bp, sp
    11                              <1> 
    12                              <1> 
    13                              <1>         ;--------------------------------
    14                              <1>         ;save register
    15                              <1>         ;--------------------------------
    16 0000014F 50                  <1>         push    ax
    17 00000150 53                  <1>         push    bx
    18 00000151 56                  <1>         push    si
    19                              <1> 
    20                              <1>         ;--------------------------------
    21                              <1>         ;get parameter
    22                              <1>         ;--------------------------------
    23 00000152 8B7604              <1>         mov     si, [bp + 4]
    24                              <1> 
    25                              <1>         ;--------------------------------
    26                              <1>         ;start 
    27                              <1>         ;--------------------------------
    28 00000155 B40E                <1>         mov     ah, 0x0E        ;tele type output
    29 00000157 BB0000              <1>         mov     bx, 0x0000      ;set 0 to page number and color of char
    30 0000015A FC                  <1>         cld                     ;DF = 0;address++
    31                              <1> .10L:                           ;do
    32                              <1>                                 ;{
    33 0000015B AC                  <1>         lodsb                   ;  AL = *SI++;
    34                              <1> 
    35 0000015C 3C00                <1>         cmp     al, 0           ;  if(0 == AL)
    36 0000015E 7404                <1>         je      .10E            ;  break;
    37                              <1> 
    38 00000160 CD10                <1>         int     0x10            ;int10(0x0E, AL); video BIOS call
    39 00000162 EBF7                <1>         jmp     .10L
    40                              <1> .10E:                            ;}while(1);
    41                              <1> 
    42                              <1>         ;--------------------------------
    43                              <1>         ;return register
    44                              <1>         ;--------------------------------
    45 00000164 5E                  <1>         pop     si
    46 00000165 5B                  <1>         pop     bx
    47 00000166 58                  <1>         pop     ax
    48                              <1> 
    49                              <1>         ;--------------------------------
    50                              <1>         ;delete stack frame
    51                              <1>         ;--------------------------------
    52 00000167 89EC                <1>         mov     sp, bp
    53 00000169 5D                  <1>         pop     bp
    54                              <1>         
    55 0000016A C3                  <1>         ret
    56                              <1> 
    87                                  %include        "../modules/real/itoa.s"
     1                              <1> itoa: 
     2                              <1> 
     3                              <1>         ;--------------------------------------- 
     4                              <1>         ; 【スタック フレーム の 構築】 
     5                              <1>         ;--------------------------------------- 
     6                              <1>                         ; + 12 | フラグ 
     7                              <1>                         ; + 10 | 基数 
     8                              <1>                         ; + 8 | バッファ サイズ 
     9                              <1>                         ; + 6 | バッファ アドレス 
    10                              <1>                         ; + 4 | 数値 ; + 2 | IP（ 戻り 番地） 
    11 0000016B 55                  <1>         push    bp      ; BP + 0 | BP（ 元 の 値） 
    12 0000016C 89E5                <1>         mov     bp, sp  ; ------+-------- 
    13                              <1>         
    14                              <1> 
    15                              <1>         ;--------------------------------------- 
    16                              <1>         ; 【レジスタ の 保存】 
    17                              <1>         ;---------------------------------------
    18                              <1>         
    19 0000016E 50                  <1>         push    ax
    20 0000016F 53                  <1>         push    bx
    21 00000170 51                  <1>         push    cx
    22 00000171 52                  <1>         push    dx
    23 00000172 56                  <1>         push    si
    24 00000173 57                  <1>         push    di
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;get parameters
    28                              <1>         ;---------------------------------------
    29                              <1>         
    30 00000174 8B4604              <1>         mov     ax, [bp + 4]    ;val = num
    31 00000177 8B7606              <1>         mov     si, [bp + 6]    ;dst = address of buffer
    32 0000017A 8B4E08              <1>         mov     cx, [bp + 8]    ;size = left size of buffer
    33                              <1> 
    34 0000017D 89F7                <1>         mov     di, si          ;buffer 最後尾
    35 0000017F 01CF                <1>         add     di, cx          ;dst = &dst[size -1]
    36 00000181 4F                  <1>         dec     di
    37                              <1>         
    38 00000182 8B5E0C              <1>         mov     bx, word [bp + 12]      ;flag
    39                              <1> 
    40                              <1> 
    41                              <1>         ;---------------------------------------
    42                              <1>         ;符号付き判定
    43                              <1>         ;---------------------------------------
    44                              <1> 
    45 00000185 F7C30100            <1>         test    bx, 0b0001      ;if (flag & 0x01)
    46                              <1> .10Q:   
    47 00000189 7408                <1>         je      .10E            ;{
    48 0000018B 83F800              <1>         cmp     ax, 0           ;if (val < 0)
    49                              <1> .12Q:
    50 0000018E 7D03                <1>         jge     .12E            ;  {
    51 00000190 83CB02              <1>         or      bx, 0b0010      ;    flag |= 2
    52                              <1> .12E:                           ;  }
    53                              <1> .10E:                           ;}
    54                              <1> 
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;符号出力判定
    58                              <1>         ;---------------------------------------
    59 00000193 F7C30200            <1>         test    bx, 0b0010      ;if(flag & 0x02)
    60                              <1> .20Q:   
    61 00000197 7410                <1>         je      .20E            ;{
    62 00000199 83F800              <1>         cmp     ax, 0           ;if (val < 0)
    63                              <1> .22Q:   
    64 0000019C 7D07                <1>         jge     .22F            ;  {
    65 0000019E F7D8                <1>         neg     ax              ;    val *= -1
    66 000001A0 C6042D              <1>         mov     [si], byte '-'  ;    *dst = '-'
    67 000001A3 EB03                <1>         jmp     .22E            ;  }
    68                              <1> .22F:                           ;else
    69                              <1>                                 ;  {
    70 000001A5 C6042B              <1>         mov     [si],byte '+'   ;    *dst= '+'
    71                              <1> .22E:                           ;  }
    72 000001A8 49                  <1>         dec     cx              ;size--;
    73                              <1> .20E:                           ;}
    74                              <1> 
    75                              <1> 
    76                              <1>         ;---------------------------------------
    77                              <1>         ;translate to ASCII
    78                              <1>         ;---------------------------------------
    79 000001A9 8B5E0A              <1>         mov     bx, [bp + 10]   ;BX = 基数
    80                              <1> .30L:                           ;do
    81                              <1>                                 ;{
    82 000001AC BA0000              <1>         mov     dx, 0
    83 000001AF F7F3                <1>         div     bx              ;DX = DX:AX % 基数
    84                              <1>                                 ;AX = DX:AX / 基数
    85                              <1> 
    86 000001B1 89D6                <1>         mov     si, dx          ;table
    87 000001B3 8A94[DB01]          <1>         mov     dl, byte [.ascii + si]  ;DL = ASCII[DX]
    88                              <1> 
    89 000001B7 8815                <1>         mov     [di], dl                ;*dst = DL;
    90 000001B9 4F                  <1>         dec     di                      ;dst--
    91 000001BA 83F800              <1>         cmp     ax, 0
    92 000001BD E0ED                <1>         loopnz  .30L                    ;}while(AX)
    93                              <1> .30E:
    94                              <1> 
    95                              <1>         ;--------------------------------------- 
    96                              <1>         ; 空欄 を 埋める 
    97                              <1>         ;--------------------------------------- 
    98 000001BF 83F900              <1>         cmp     cx, 0                   ; if (size) 
    99                              <1> .40Q: 
   100 000001C2 740D                <1>         je      .40E                   ; { 
   101 000001C4 B020                <1>         mov     al, ' '                 ; AL = ' '; // ' 'で 埋める（ デフォルト 値） 
   102 000001C6 837E0C04            <1>         cmp     [bp + 12], word 0b0100  ; if (flags & 0 x 04) 
   103                              <1> .42Q: 
   104 000001CA 7502                <1>         jne     .42E                   ; { 
   105 000001CC B030                <1>         mov     al, '0'                 ;   AL = '0'; // '0' で 埋める 
   106                              <1> .42E:                                  ; } 
   107 000001CE FD                  <1>         std                             ;   // DF = 1（- 方向） 
   108 000001CF F3AA                <1>         rep     stosb                   ;   while (--CX) *DI-- = ' '; 
   109                              <1> .40E:                                  ; }
   110                              <1> 
   111                              <1> 
   112                              <1>         ;--------------------------------------- 
   113                              <1>         ;return register
   114                              <1>         ;--------------------------------------- 
   115                              <1> 
   116 000001D1 5F                  <1>         pop     di 
   117 000001D2 5E                  <1>         pop     si 
   118 000001D3 5A                  <1>         pop     dx 
   119 000001D4 59                  <1>         pop     cx 
   120 000001D5 5B                  <1>         pop     bx 
   121 000001D6 58                  <1>         pop     ax 
   122                              <1> 
   123                              <1>         ;--------------------------------------- 
   124                              <1>         ; 【スタック フレーム の 破棄】 
   125                              <1>         ;--------------------------------------- 
   126 000001D7 89EC                <1>         mov     sp, bp 
   127 000001D9 5D                  <1>         pop     bp 
   128 000001DA C3                  <1>         ret 
   129                              <1> 
   130 000001DB 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"      ; 変換 テーブル
   130 000001E4 39414243444546      <1>
   131                              <1> 
    88                                  
    89                                  ;************************************************
    90                                  ; boot flag
    91                                  ;************************************************
    92                                  
    93 000001EB 00<rept>                        times   510-($-$$) db 0x00
    94 000001FE 55AA                            db      0x55, 0xAA
