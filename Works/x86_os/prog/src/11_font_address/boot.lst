     1                                  ;************************************************
     2                                  ;macro
     3                                  ;************************************************
     4                                  %include        "../include/define.s"
     1                              <1>         BOOT_LOAD       equ     0x7c00  ;boot position of boot program
     2                              <1> 
     3                              <1>         BOOT_SIZE       equ     (1024 * 8)      ;boot size
     4                              <1>         SECT_SIZE       equ     (512)           ;sector size
     5                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE) ;number of sector of boot program
     5                                  %include        "../include/macro.s"
     1                              <1> %macro cdecl 1-*.nolist 
     2                              <1>         
     3                              <1>         %rep %0 - 1 
     4                              <1>           push  %{-1:-1} 
     5                              <1>           %rotate -1 
     6                              <1>         %endrep 
     7                              <1>         
     8                              <1>         %rotate -1 
     9                              <1>           
    10                              <1>           call  %1 
    11                              <1>         
    12                              <1>         %if 1 < %0 
    13                              <1>           add   sp, (__BITS__ >> 3) * (%0 - 1) 
    14                              <1>         %endif 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc drive
    18 00000000 <res 00000002>      <1>         .no     resw 1          ;number of drive
    19 00000002 <res 00000002>      <1>         .cyln   resw 1          ;silinda
    20 00000004 <res 00000002>      <1>         .head   resw 1          ;head
    21 00000006 <res 00000002>      <1>         .sect   resw 1          ;sector
    22                              <1> endstruc
     6                                  
     7                                          ORG     BOOT_LOAD       ;load address
     8                                  
     9                                  ;************************************************
    10                                  ;entry point
    11                                  ;************************************************
    12                                  
    13                                  entry:
    14                                          ;----------------------------------------
    15                                          ;BPB
    16                                          ;----------------------------------------
    17 00000000 EB58                            jmp     ipl
    18 00000002 90<rept>                        times   90-($-$$) db 0x90
    19                                  
    20                                          ;----------------------------------------
    21                                          ;IPL
    22                                          ;----------------------------------------
    23                                  
    24                                  
    25                                  ipl:
    26 0000005A FA                              cli     ;deny interrupt
    27                                  
    28                                  
    29 0000005B B80000                          mov     ax, 0x0000
    30 0000005E 8ED8                            mov     ds, ax
    31 00000060 8EC0                            mov     es, ax
    32 00000062 8ED0                            mov     ss, ax
    33 00000064 BC007C                          mov     sp, BOOT_LOAD
    34                                  
    35 00000067 FB                              sti                     ;allow interrupt
    36                                          
    37                                          ;------------------------------------
    38                                          ;save boot drive
    39                                          ;------------------------------------
    40 00000068 8816[BA00]                      mov     [BOOT + drive.no], dl ;save boot drive
    41                                  
    42                                          ;------------------------------------
    43                                          ;print char
    44                                          ;------------------------------------
    45 0000006C 68[9900]E8500083C4-             cdecl   puts, .s0       ;puts(.s0)
    45 00000074 02                 
    46                                  
    47                                          ;------------------------------------
    48                                          ;read all sector
    49                                          ;------------------------------------
    50 00000075 BB0F00                          mov     bx, BOOT_SECT - 1       ;BX = number of boot sector
    51 00000078 B9007E                          mov     cx, BOOT_LOAD + SECT_SIZE       ;CX = silinda/sector
    52                                          
    53                                  
    54 0000007B 515368[BA00]E89D00-             cdecl   read_chs, BOOT, bx, cx  ;AX = read_chs(BOOT, BX, CX);
    54 00000083 83C406             
    55                                  
    56 00000086 39D8                            cmp     ax, bx
    57 00000088 740C                    .10Q:   jz      .10E                    ;{
    58 0000008A 68[A700]E8320083C4-     .10T:   cdecl   puts, .e0               ;{puts(.e0);
    58 00000092 02                 
    59 00000093 E84B00                          call    reboot                  ;reboot()
    60                                  .10E:                                   ;}
    61                                  
    62                                          ;------------------------------------
    63                                          ;move stage2
    64                                          ;------------------------------------
    65                                  
    66 00000096 E94C02                          jmp     stage_2                 ;boot stage2
    67                                  
    68                                          ;------------------------------------
    69                                          ;data
    70                                          ;------------------------------------
    71 00000099 426F6F74696E672E2E-     .s0     db "Booting....", 0x0A, 0x0D, 0
    71 000000A2 2E2E0A0D00         
    72 000000A7 4572726F723A736563-     .e0     db "Error:sector read", 0
    72 000000B0 746F72207265616400 
    73                                  
    74 000000B9 00                      ALIGN 2, db 0
    75                                  BOOT:                   ;information of boot drive
    76                                          istruc drive
    77 000000BA 0000                                    at drive.no,        dw 0    ;number of drive
    78 000000BC 0000                                    at drive.cyln,      dw 0    ;C:silinda
    79 000000BE 0000                                    at drive.head,      dw 0    ;H:head
    80 000000C0 0200                                    at drive.sect,      dw 2    ;sector
    81                                          iend
    82                                  
    83                                  ;************************************************
    84                                  ;modules
    85                                  ;************************************************
    86                                  
    87                                  %include        "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1> 
     3                              <1>         ;--------------------------------
     4                              <1>         ;create stack frame
     5                              <1>         ;--------------------------------
     6                              <1> 
     7                              <1>         ;push strings address   BP +4|
     8                              <1>         ;push return address       +2| IP
     9 000000C2 55                  <1>         push    bp                 ;+0| BP
    10 000000C3 89E5                <1>         mov     bp, sp
    11                              <1> 
    12                              <1> 
    13                              <1>         ;--------------------------------
    14                              <1>         ;save register
    15                              <1>         ;--------------------------------
    16 000000C5 50                  <1>         push    ax
    17 000000C6 53                  <1>         push    bx
    18 000000C7 56                  <1>         push    si
    19                              <1> 
    20                              <1>         ;--------------------------------
    21                              <1>         ;get parameter
    22                              <1>         ;--------------------------------
    23 000000C8 8B7604              <1>         mov     si, [bp + 4]
    24                              <1> 
    25                              <1>         ;--------------------------------
    26                              <1>         ;start 
    27                              <1>         ;--------------------------------
    28 000000CB B40E                <1>         mov     ah, 0x0E        ;tele type output
    29 000000CD BB0000              <1>         mov     bx, 0x0000      ;set 0 to page number and color of char
    30 000000D0 FC                  <1>         cld                     ;DF = 0;address++
    31                              <1> .10L:                           ;do
    32                              <1>                                 ;{
    33 000000D1 AC                  <1>         lodsb                   ;  AL = *SI++;
    34                              <1> 
    35 000000D2 3C00                <1>         cmp     al, 0           ;  if(0 == AL)
    36 000000D4 7404                <1>         je      .10E            ;  break;
    37                              <1> 
    38 000000D6 CD10                <1>         int     0x10            ;int10(0x0E, AL); video BIOS call
    39 000000D8 EBF7                <1>         jmp     .10L
    40                              <1> .10E:                            ;}while(1);
    41                              <1> 
    42                              <1>         ;--------------------------------
    43                              <1>         ;return register
    44                              <1>         ;--------------------------------
    45 000000DA 5E                  <1>         pop     si
    46 000000DB 5B                  <1>         pop     bx
    47 000000DC 58                  <1>         pop     ax
    48                              <1> 
    49                              <1>         ;--------------------------------
    50                              <1>         ;delete stack frame
    51                              <1>         ;--------------------------------
    52 000000DD 89EC                <1>         mov     sp, bp
    53 000000DF 5D                  <1>         pop     bp
    54                              <1>         
    55 000000E0 C3                  <1>         ret
    56                              <1> 
    88                                  %include        "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1> 
     3                              <1>         ;---------------------------------
     4                              <1>         ;print message
     5                              <1>         ;---------------------------------
     6 000000E1 68[FD00]E8DBFF83C4- <1>         cdecl   puts, .s0               ;print message of reboot
     6 000000E9 02                  <1>
     7                              <1> 
     8                              <1> 
     9                              <1>         ;---------------------------------
    10                              <1>         ;waiting for key input
    11                              <1>         ;---------------------------------
    12                              <1> .10L:                                   ;do
    13                              <1>                                         ;{
    14 000000EA B410                <1>         mov     ah, 0x10                ;//waiting for key input
    15 000000EC CD16                <1>         int     0x16                    ;AL = BIOS(0x16,0x10);
    16                              <1> 
    17 000000EE 3C20                <1>         cmp     al,' '                  ;ZF = AL =='';
    18 000000F0 75F8                <1>         jne     .10L                    ;}while(!ZF);
    19                              <1> 
    20                              <1>         ;---------------------------------
    21                              <1>         ;output '\n'
    22                              <1>         ;---------------------------------
    23 000000F2 68[1B01]E8CAFF83C4- <1>         cdecl   puts, .s1               ;'\n'
    23 000000FA 02                  <1>
    24                              <1> 
    25                              <1>         ;---------------------------------
    26                              <1>         ;reboot
    27                              <1>         ;---------------------------------
    28 000000FB CD19                <1>         int     0x19                    ;BIOS(0x19);    //reboot();
    29                              <1> 
    30                              <1>         ;---------------------------------
    31                              <1>         ;data of strings
    32                              <1>         ;---------------------------------
    33 000000FD 0A0D50757368205350- <1> .s0     db      0x0A, 0x0D, "Push SPACE key to reboot...", 0
    33 00000106 414345206B65792074- <1>
    33 0000010F 6F207265626F6F742E- <1>
    33 00000118 2E2E00              <1>
    34 0000011B 0A0D0A0D00          <1> .s1     db      0x0A, 0x0D, 0x0A,0x0D,0
    89                                  %include        "../modules/real/read_chs.s"
     1                              <1> read_chs:
     2                              <1>         ;--------------------------------------- 
     3                              <1>         ; 【スタック フレーム の 構築】 
     4                              <1>         ;--------------------------------------- 
     5                              <1>                                         ; + 8 | コピー 先 
     6                              <1>                                         ; + 6 | セクタ 数 
     7                              <1>                                         ; + 4 | パラメータ バッファ 
     8                              <1>                                         ; ------+---------------- 
     9                              <1>                                         ; + 2 | IP（ 戻り 番地） 
    10 00000120 55                  <1>         push    bp                      ; BP + 0 | BP（ 元 の 値）
    11 00000121 89E5                <1>         mov     bp, sp                  ; ------+-------- 
    12 00000123 6A03                <1>         push    3                       ; - 2 | retry = 3; // リトライ 回数 
    13 00000125 6A00                <1>         push    0                       ; - 4 | sect = 0; // 読み込み セクタ 数 
    14                              <1> 
    15                              <1>         
    16                              <1>         ;--------------------------------------- 
    17                              <1>         ; 【レジスタ の 保存】 
    18                              <1>         ;--------------------------------------- 
    19 00000127 53                  <1>         push    bx 
    20 00000128 51                  <1>         push    cx 
    21 00000129 52                  <1>         push    dx 
    22 0000012A 06                  <1>         push    es 
    23 0000012B 56                  <1>         push    si 
    24                              <1> 
    25                              <1>         ;--------------------------------------- 
    26                              <1>         ; 【処理 の 開始】 
    27                              <1>         ;--------------------------------------- 
    28 0000012C 8B7604              <1>         mov     si, [bp + 4] ; SI = SRC バッファ; 
    29                              <1> 
    30                              <1>         ;--------------------------------------- 
    31                              <1>         ; CX レジスタ の 設定 
    32                              <1>         ;（BIOS コール の 呼び出し に 適し た 形 に 変換）
    33                              <1>         ;--------------------------------------- 
    34 0000012F 8A6C02              <1>         mov     ch, [si + drive.cyln + 0] ; CH = シリンダ 番号（ 下位 バイト） 
    35 00000132 8A4C03              <1>         mov     cl, [si + drive.cyln + 1] ; CL = シリンダ 番号（ 上位 バイト） 
    36 00000135 C0E106              <1>         shl     cl, 6                     ; CL <<= 6; // 最上位 2 ビット に シフト 
    37 00000138 0A4C06              <1>         or      cl, [si + drive.sect]     ; CL |= セクタ 番号; 
    38                              <1> 
    39                              <1>         ;--------------------------------------- 
    40                              <1>         ; セクタ 読み込み 
    41                              <1>         ;--------------------------------------- 
    42 0000013B 8A7404              <1>         mov     dh, [si + drive.head]       ; DH = ヘッド 番号; 
    43 0000013E 8A14                <1>         mov     dl, [si + 0]                ; DL = ドライブ 番号; 
    44 00000140 B80000              <1>         mov     ax, 0x0000                  ; AX = 0 x 0000; 
    45 00000143 8EC0                <1>         mov     es, ax                      ; ES = セグメント 
    46 00000145 8B5E08              <1>         mov     bx, [bp + 8]                ; BX = コピー 先; 
    47                              <1> .10L:                                    ; do ; { 
    48 00000148 B402                <1>         mov     ah, 0x02                    ; AH = セクタ 読み込み 
    49 0000014A 8A4606              <1>         mov     al, [bp + 6]                ; AL = セクタ 数 
    50                              <1>                                         ; 
    51 0000014D CD13                <1>         int     0x13                        ; CF = BIOS( 0 x 13, 0 x 02); 
    52 0000014F 7304                <1>         jnc     .11E                        ; if (CF)
    53                              <1>                                         ; { 
    54 00000151 B000                <1>         mov     al, 0                       ; AL = 0; 
    55 00000153 EB0C                <1>         jmp     .10E                        ; break; 
    56                              <1> .11E:                                   ; } 
    57                              <1>                                         ; 
    58 00000155 3C00                <1>         cmp     al, 0                       ; if (読み込ん だ セクタ が あれ ば) 
    59 00000157 7508                <1>         jne     .10E                        ; break; 
    60                              <1>                                         ; 
    61 00000159 B80000              <1>         mov     ax, 0                       ; ret = 0; // 戻り値 を 設定 
    62 0000015C FF4EFE              <1>         dec     word [bp - 2]           ; } 
    63 0000015F 75E7                <1>         jnz     .10L                        ; while (--retry); 
    64 00000161 B400                <1> .10E:   mov     ah, 0                  ; AH = 0; // ステータス 情報 は 破棄 
    65                              <1>         ;--------------------------------------- 
    66                              <1>         ; 【レジスタ の 復帰】 
    67                              <1>         ;--------------------------------------- 
    68 00000163 5E                  <1>         pop     si 
    69 00000164 07                  <1>         pop     es 
    70 00000165 5A                  <1>         pop     dx 
    71 00000166 59                  <1>         pop     cx
    72 00000167 5B                  <1>         pop     bx                              
    73                              <1>         ;--------------------------------------- 
    74                              <1>         ; 【スタック フレーム の 破棄】 
    75                              <1>         ;--------------------------------------- 
    76 00000168 89EC                <1>         mov     sp, bp 
    77 0000016A 5D                  <1>         pop     bp 
    78 0000016B C3                  <1>         ret
    79                              <1> 
    90                                  ;************************************************
    91                                  ; boot flag
    92                                  ;************************************************
    93                                  
    94 0000016C 00<rept>                        times   510-($-$$) db 0x00
    95 000001FE 55AA                            db      0x55, 0xAA
    96                                  
    97                                  ;************************************************
    98                                  ;information got in real mode
    99                                  ;************************************************
   100                                  FONT:
   101 00000200 0000                    .seg:   dw 0
   102 00000202 0000                    .off:   dw 0
   103                                  
   104                                  ;************************************************
   105                                  ;boot stage2
   106                                  ;************************************************
   107                                  
   108                                  ;************************************************
   109                                  ;modules
   110                                  ;************************************************
   111                                  %include        "../modules/real/itoa.s"
     1                              <1> itoa: 
     2                              <1> 
     3                              <1>         ;--------------------------------------- 
     4                              <1>         ; 【スタック フレーム の 構築】 
     5                              <1>         ;--------------------------------------- 
     6                              <1>                         ; + 12 | フラグ 
     7                              <1>                         ; + 10 | 基数 
     8                              <1>                         ; + 8 | バッファ サイズ 
     9                              <1>                         ; + 6 | バッファ アドレス 
    10                              <1>                         ; + 4 | 数値 ; + 2 | IP（ 戻り 番地） 
    11 00000204 55                  <1>         push    bp      ; BP + 0 | BP（ 元 の 値） 
    12 00000205 89E5                <1>         mov     bp, sp  ; ------+-------- 
    13                              <1>         
    14                              <1> 
    15                              <1>         ;--------------------------------------- 
    16                              <1>         ; 【レジスタ の 保存】 
    17                              <1>         ;---------------------------------------
    18                              <1>         
    19 00000207 50                  <1>         push    ax
    20 00000208 53                  <1>         push    bx
    21 00000209 51                  <1>         push    cx
    22 0000020A 52                  <1>         push    dx
    23 0000020B 56                  <1>         push    si
    24 0000020C 57                  <1>         push    di
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;get parameters
    28                              <1>         ;---------------------------------------
    29                              <1>         
    30 0000020D 8B4604              <1>         mov     ax, [bp + 4]    ;val = num
    31 00000210 8B7606              <1>         mov     si, [bp + 6]    ;dst = address of buffer
    32 00000213 8B4E08              <1>         mov     cx, [bp + 8]    ;size = left size of buffer
    33                              <1> 
    34 00000216 89F7                <1>         mov     di, si          ;buffer 最後尾
    35 00000218 01CF                <1>         add     di, cx          ;dst = &dst[size -1]
    36 0000021A 4F                  <1>         dec     di
    37                              <1>         
    38 0000021B 8B5E0C              <1>         mov     bx, word [bp + 12]      ;flag
    39                              <1> 
    40                              <1> 
    41                              <1>         ;---------------------------------------
    42                              <1>         ;符号付き判定
    43                              <1>         ;---------------------------------------
    44                              <1> 
    45 0000021E F7C30100            <1>         test    bx, 0b0001      ;if (flag & 0x01)
    46                              <1> .10Q:   
    47 00000222 7408                <1>         je      .10E            ;{
    48 00000224 83F800              <1>         cmp     ax, 0           ;if (val < 0)
    49                              <1> .12Q:
    50 00000227 7D03                <1>         jge     .12E            ;  {
    51 00000229 83CB02              <1>         or      bx, 0b0010      ;    flag |= 2
    52                              <1> .12E:                           ;  }
    53                              <1> .10E:                           ;}
    54                              <1> 
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;符号出力判定
    58                              <1>         ;---------------------------------------
    59 0000022C F7C30200            <1>         test    bx, 0b0010      ;if(flag & 0x02)
    60                              <1> .20Q:   
    61 00000230 7410                <1>         je      .20E            ;{
    62 00000232 83F800              <1>         cmp     ax, 0           ;if (val < 0)
    63                              <1> .22Q:   
    64 00000235 7D07                <1>         jge     .22F            ;  {
    65 00000237 F7D8                <1>         neg     ax              ;    val *= -1
    66 00000239 C6042D              <1>         mov     [si], byte '-'  ;    *dst = '-'
    67 0000023C EB03                <1>         jmp     .22E            ;  }
    68                              <1> .22F:                           ;else
    69                              <1>                                 ;  {
    70 0000023E C6042B              <1>         mov     [si],byte '+'   ;    *dst= '+'
    71                              <1> .22E:                           ;  }
    72 00000241 49                  <1>         dec     cx              ;size--;
    73                              <1> .20E:                           ;}
    74                              <1> 
    75                              <1> 
    76                              <1>         ;---------------------------------------
    77                              <1>         ;translate to ASCII
    78                              <1>         ;---------------------------------------
    79 00000242 8B5E0A              <1>         mov     bx, [bp + 10]   ;BX = 基数
    80                              <1> .30L:                           ;do
    81                              <1>                                 ;{
    82 00000245 BA0000              <1>         mov     dx, 0
    83 00000248 F7F3                <1>         div     bx              ;DX = DX:AX % 基数
    84                              <1>                                 ;AX = DX:AX / 基数
    85                              <1> 
    86 0000024A 89D6                <1>         mov     si, dx          ;table
    87 0000024C 8A94[7402]          <1>         mov     dl, byte [.ascii + si]  ;DL = ASCII[DX]
    88                              <1> 
    89 00000250 8815                <1>         mov     [di], dl                ;*dst = DL;
    90 00000252 4F                  <1>         dec     di                      ;dst--
    91 00000253 83F800              <1>         cmp     ax, 0
    92 00000256 E0ED                <1>         loopnz  .30L                    ;}while(AX)
    93                              <1> .30E:
    94                              <1> 
    95                              <1>         ;--------------------------------------- 
    96                              <1>         ; 空欄 を 埋める 
    97                              <1>         ;--------------------------------------- 
    98 00000258 83F900              <1>         cmp     cx, 0                   ; if (size) 
    99                              <1> .40Q: 
   100 0000025B 740D                <1>         je      .40E                   ; { 
   101 0000025D B020                <1>         mov     al, ' '                 ; AL = ' '; // ' 'で 埋める（ デフォルト 値） 
   102 0000025F 837E0C04            <1>         cmp     [bp + 12], word 0b0100  ; if (flags & 0 x 04) 
   103                              <1> .42Q: 
   104 00000263 7502                <1>         jne     .42E                   ; { 
   105 00000265 B030                <1>         mov     al, '0'                 ;   AL = '0'; // '0' で 埋める 
   106                              <1> .42E:                                  ; } 
   107 00000267 FD                  <1>         std                             ;   // DF = 1（- 方向） 
   108 00000268 F3AA                <1>         rep     stosb                   ;   while (--CX) *DI-- = ' '; 
   109                              <1> .40E:                                  ; }
   110                              <1> 
   111                              <1> 
   112                              <1>         ;--------------------------------------- 
   113                              <1>         ;return register
   114                              <1>         ;--------------------------------------- 
   115                              <1> 
   116 0000026A 5F                  <1>         pop     di 
   117 0000026B 5E                  <1>         pop     si 
   118 0000026C 5A                  <1>         pop     dx 
   119 0000026D 59                  <1>         pop     cx 
   120 0000026E 5B                  <1>         pop     bx 
   121 0000026F 58                  <1>         pop     ax 
   122                              <1> 
   123                              <1>         ;--------------------------------------- 
   124                              <1>         ; 【スタック フレーム の 破棄】 
   125                              <1>         ;--------------------------------------- 
   126 00000270 89EC                <1>         mov     sp, bp 
   127 00000272 5D                  <1>         pop     bp 
   128 00000273 C3                  <1>         ret 
   129                              <1> 
   130 00000274 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"      ; 変換 テーブル
   130 0000027D 39414243444546      <1>
   131                              <1> 
   112                                  %include        "../modules/real/get_drive_param.s"
     1                              <1> get_drive_param:
     2                              <1>         ;--------------------------------------- 
     3                              <1>         ; 【スタック フレーム の 構築】 
     4                              <1>         ;--------------------------------------- 
     5                              <1>                                         ; + 4 | パラメータ バッファ 
     6                              <1>                                         ; ------+---------------- 
     7                              <1>                                         ; + 2 | IP（ 戻り 番地） 
     8 00000284 55                  <1>         push    bp                      ; BP + 0 | BP（ 元 の 値）
     9 00000285 89E5                <1>         mov     bp, sp                  ; ------+-------- 
    10                              <1> 
    11                              <1>         
    12                              <1>         ;--------------------------------------- 
    13                              <1>         ; 【レジスタ の 保存】 
    14                              <1>         ;--------------------------------------- 
    15 00000287 53                  <1>         push    bx 
    16 00000288 51                  <1>         push    cx 
    17 00000289 06                  <1>         push    es 
    18 0000028A 56                  <1>         push    si 
    19 0000028B 57                  <1>         push    di 
    20                              <1> 
    21                              <1>         ;--------------------------------------- 
    22                              <1>         ; 【処理 の 開始】 
    23                              <1>         ;--------------------------------------- 
    24 0000028C 8B7604              <1>         mov     si, [bp + 4] ; SI = SRC バッファ; 
    25                              <1> 
    26 0000028F B80000              <1>         mov     ax, 0                   ; Disk Base Table Pointer の 初期化 
    27 00000292 8EC0                <1>         mov     es, ax                  ; ES = 0; 
    28 00000294 89C7                <1>         mov     di, ax                  ; DI = 0; 
    29                              <1>         
    30 00000296 B408                <1>         mov     ah, 8                   ; // get drive parameters 
    31 00000298 8A14                <1>         mov     dl, [si + drive.no]     ; DL = ドライブ 番号
    32 0000029A CD13                <1>         int     0x13                    ; CF = BIOS( 0 x 13, 8); 
    33                              <1> .10Q:   
    34 0000029C 721B                <1>         jc      .10F                    ; if (0 == CF) //Failed
    35                              <1> 
    36                              <1> .10T:                                   ; { 
    37 0000029E 88C8                <1>         mov     al, cl                  ; AX = セクタ 数 
    38 000002A0 83E03F              <1>         and     ax, 0x3F                ; // 下位 6 ビット のみ 有効
    39                              <1>         
    40 000002A3 C0E906              <1>         shr     cl, 6                   ; CX = シリンダ 数 
    41 000002A6 C1C908              <1>         ror     cx, 8                   ; 
    42 000002A9 41                  <1>         inc     cx                      ; 
    43                              <1>         
    44 000002AA 0FB6DE              <1>         movzx   bx, dh                  ; BX = ヘッド 数（ 1 ベース） 
    45 000002AD 43                  <1>         inc     bx                      ; 
    46                              <1>        
    47 000002AE 894C02              <1>         mov     [si + drive.cyln], cx   ; drive.syln = CX; // C: シリンダ 数 
    48 000002B1 895C04              <1>         mov     [si + drive.head], bx   ; drive. head = BX; // H: ヘッド 数 
    49 000002B4 894406              <1>         mov     [si + drive.sect], ax   ; drive. sect = AX; // S: セクタ 数 
    50 000002B7 EB03                <1>         jmp     .10E                    ; } 
    51                              <1> .10F:                                   ; else ; { 
    52 000002B9 B80000              <1>         mov     ax, 0                   ; AX = 0; // 失敗 
    53                              <1> .10E:                                   ; }
    54                              <1> 
    55                              <1>         ;--------------------------------------- 
    56                              <1>         ; 【レジスタ の 復帰】 
    57                              <1>         ;--------------------------------------- 
    58 000002BC 5F                  <1>         pop     di 
    59 000002BD 5E                  <1>         pop     si 
    60 000002BE 07                  <1>         pop     es 
    61 000002BF 59                  <1>         pop     cx
    62 000002C0 5B                  <1>         pop     bx                              
    63                              <1>         ;--------------------------------------- 
    64                              <1>         ; 【スタック フレーム の 破棄】 
    65                              <1>         ;--------------------------------------- 
    66 000002C1 89EC                <1>         mov     sp, bp 
    67 000002C3 5D                  <1>         pop     bp 
    68 000002C4 C3                  <1>         ret
    69                              <1> 
   113                                  %include        "../modules/real/get_font_adr.s"
     1                              <1> get_font_adr:
     2                              <1>         ;--------------------------------------- 
     3                              <1>         ; 【スタック フレーム の 構築】 
     4                              <1>         ;--------------------------------------- 
     5                              <1>                                         ; + 4 | パラメータ バッファ 
     6                              <1>                                         ; ------+---------------- 
     7                              <1>                                         ; + 2 | IP（ 戻り 番地） 
     8 000002C5 55                  <1>         push    bp                      ; BP + 0 | BP（ 元 の 値）
     9 000002C6 89E5                <1>         mov     bp, sp                  ; ------+-------- 
    10                              <1> 
    11                              <1>         
    12                              <1>         ;--------------------------------------- 
    13                              <1>         ; 【レジスタ の 保存】 
    14                              <1>         ;--------------------------------------- 
    15 000002C8 50                  <1>         push    ax
    16 000002C9 53                  <1>         push    bx 
    17 000002CA 56                  <1>         push    si 
    18 000002CB 06                  <1>         push    es 
    19 000002CC 55                  <1>         push    bp  
    20                              <1> 
    21                              <1>         ;--------------------------------------- 
    22                              <1>         ; 引数を取得 
    23                              <1>         ;--------------------------------------- 
    24 000002CD 8B7604              <1>         mov     si, [bp + 4]            ; SI = SRC バッファ; 
    25                              <1>         ;--------------------------------------- 
    26                              <1>         ; フォントアドレスを取得 
    27                              <1>         ;--------------------------------------- 
    28 000002D0 B83011              <1>         mov     ax, 0x1130              ;get font address
    29 000002D3 B706                <1>         mov     bh, 0x06                ;8x 16 font (vga/mcga)
    30 000002D5 CD10                <1>         int     10h                     ;ES:BP=FONT ADDRESS
    31                              <1> 
    32                              <1>         ;--------------------------------------- 
    33                              <1>         ; フォントアドレスを保存 
    34                              <1>         ;--------------------------------------- 
    35 000002D7 8C04                <1>         mov     [si + 0], es            ; dst[0] = segment; 
    36 000002D9 896C02              <1>         mov     [si + 2], bp            ; dst[1] = offset; 
    37                              <1> 
    38                              <1>         ;--------------------------------------- 
    39                              <1>         ; 【レジスタ の 復帰】 
    40                              <1>         ;--------------------------------------- 
    41 000002DC 5D                  <1>         pop     bp 
    42 000002DD 07                  <1>         pop     es 
    43 000002DE 5E                  <1>         pop     si 
    44 000002DF 5B                  <1>         pop     bx
    45 000002E0 58                  <1>         pop     ax                              
    46                              <1>         ;--------------------------------------- 
    47                              <1>         ; 【スタック フレーム の 破棄】 
    48                              <1>         ;--------------------------------------- 
    49 000002E1 89EC                <1>         mov     sp, bp 
    50 000002E3 5D                  <1>         pop     bp 
    51 000002E4 C3                  <1>         ret
    52                              <1> 
   114                                  
   115                                  stage_2:
   116                                          ;-----------------------------------
   117                                          ;print strings
   118                                          ;-----------------------------------
   119 000002E5 68[5F03]E8D7FD83C4-             cdecl   puts, .s0
   119 000002ED 02                 
   120                                  
   121                                          ;-----------------------------------
   122                                          ;get drive parameters
   123                                          ;-----------------------------------
   124 000002EE 68[BA00]E890FF83C4-             cdecl   get_drive_param, BOOT  ;AX = get_drive_param(BOOT);
   124 000002F6 02                 
   125                                  
   126 000002F7 83F800                          cmp     ax, 0
   127 000002FA 750C                    .10Q:   jne     .10E                    ;{
   128 000002FC 68[9603]E8C0FD83C4-     .10T:   cdecl   puts, .e0               ;{puts(.e0);
   128 00000304 02                 
   129 00000305 E8D9FD                          call    reboot                  ;reboot()
   130                                  .10E:                                   ;}
   131                                  
   132                                          ;-----------------------------------
   133                                          ;print drive parameters
   134                                          ;-----------------------------------
   135 00000308 A1[BA00]                        mov     ax, [BOOT + drive.no]   ;AX = boot drive
   136 0000030B 6A046A106A0268-                 cdecl   itoa, ax, .p1, 2, 16, 0b0100    ;
   136 00000312 [7703]50E8ECFE83C4-
   136 0000031A 0A                 
   137 0000031B A1[BC00]                        mov     ax, [BOOT + drive.cyln] ;
   138 0000031E 6A046A106A0468-                 cdecl   itoa, ax, .p2, 4, 16, 0b0100    ;
   138 00000325 [7F03]50E8D9FE83C4-
   138 0000032D 0A                 
   139 0000032E A1[BE00]                        mov     ax, [BOOT + drive.head] ;
   140 00000331 6A046A106A0268-                 cdecl   itoa, ax, .p3, 2, 16, 0b0100    ;
   140 00000338 [8903]50E8C6FE83C4-
   140 00000340 0A                 
   141 00000341 A1[C000]                        mov     ax, [BOOT + drive.sect] ;
   142 00000344 6A046A106A0268-                 cdecl   itoa, ax, .p4, 2, 16, 0b0100    ;
   142 0000034B [9103]50E8B3FE83C4-
   142 00000353 0A                 
   143 00000354 68[6E03]E868FD83C4-             cdecl   puts, .s1
   143 0000035C 02                 
   144                                          
   145                                          ;-----------------------------------
   146                                          ;move next stage
   147                                          ;-----------------------------------
   148 0000035D EB52                            jmp     stage_3rd               ;move next stage
   149                                          
   150                                  
   151                                          ;-----------------------------------
   152                                          ;data
   153                                          ;-----------------------------------
   154 0000035F 326E64207374616765-     .s0     db "2nd stage...", 0x0A, 0x0D, 0
   154 00000368 2E2E2E0A0D00       
   155 0000036E 2044726976653A3078      .s1     db " Drive:0x" 
   156 00000377 20202C20433A3078        .p1     db "  , C:0x" 
   157 0000037F 202020202C20483A30-     .p2     db "    , H:0x" 
   157 00000388 78                 
   158 00000389 20202C20533A3078        .p3     db "  , S:0x" 
   159 00000391 20200A0D00              .p4     db "  ", 0x0A, 0x0D, 0 
   160 00000396 43616E277420676574-     .e0     db "Can't get drive parameter.", 0
   160 0000039F 206472697665207061-
   160 000003A8 72616D657465722E00 
   161                                  
   162                                  
   163                                  ;************************************************
   164                                  ;boot 3rd stage
   165                                  ;************************************************
   166                                  stage_3rd:
   167                                          ;-----------------------------------
   168                                          ;print strings
   169                                          ;-----------------------------------
   170 000003B1 68[F403]E80BFD83C4-             cdecl   puts, .s0
   170 000003B9 02                 
   171                                  
   172                                          ;-----------------------------------
   173                                          ;use the font which is using in BIOS 
   174                                          ;-----------------------------------
   175 000003BA 68[0002]E805FF83C4-             cdecl   get_font_adr, FONT      ;get font
   175 000003C2 02                 
   176                                  
   177                                          ;-----------------------------------
   178                                          ;print font address
   179                                          ;-----------------------------------
   180 000003C3 6A046A106A0468-                 cdecl   itoa, word[FONT.seg], .p1, 4, 16, 0b0100
   180 000003CA [1104]FF36[0002]E8-
   180 000003D1 31FE83C40A         
   181 000003D6 6A046A106A0468-                 cdecl   itoa, word[FONT.off], .p2, 4, 16, 0b0100
   181 000003DD [1604]FF36[0202]E8-
   181 000003E4 1EFE83C40A         
   182 000003E9 68[0304]E8D3FC83C4-             cdecl   puts, .s1
   182 000003F1 02                 
   183                                  
   184                                          ;-----------------------------------
   185                                          ;finish code
   186                                          ;-----------------------------------
   187 000003F2 EBFE                            jmp     $
   188                                  
   189                                          ;-----------------------------------
   190                                          ;data
   191                                          ;-----------------------------------
   192 000003F4 337264207374616765-     .s0     db "3rd stage...", 0x0A, 0x0D, 0
   192 000003FD 2E2E2E0A0D00       
   193                                  
   194 00000403 20466F6E7420416464-     .s1     db " Font Address="
   194 0000040C 726573733D         
   195 00000411 5A5A5A5A3A              .p1     db "ZZZZ:"
   196 00000416 5A5A5A5A0A0D00          .p2     db "ZZZZ", 0x0A, 0x0D, 0
   197 0000041D 0A0D00                          db 0x0A, 0x0D, 0
   198                                  
   199                                  
   200                                  ;************************************************
   201                                  ;pating 8Kbite
   202                                  ;************************************************
   203 00000420 00<rept>                        times   BOOT_SIZE - ($ - $$) db 0      ;8Kbyte
   204                                  
   205                                  
